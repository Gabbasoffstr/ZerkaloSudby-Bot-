from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import logging
import os
import openai

API_TOKEN = os.getenv("API_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É —Å—É–¥—å–±—ã"),
    KeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
)
main_kb.add(
    KeyboardButton("‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"),
    KeyboardButton("üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–ª–∞—Ç–Ω–æ)")
)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ç—Ä–∏—Ü—É –°—É–¥—å–±—ã! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:", reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text == "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É —Å—É–¥—å–±—ã")
async def classic_matrix(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@dp.message_handler(lambda msg: msg.text == "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
async def finance_matrix(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã:")

@dp.message_handler(lambda msg: msg.text == "‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
async def compatibility(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: 06.10.1985, 15.08.1990")

@dp.message_handler(lambda msg: msg.text == "üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–ª–∞—Ç–Ω–æ)")
async def premium_feature(message: types.Message):
    await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –Ω–∞ —Å–∞–π—Ç–µ: https://–≤–∞—à—Å–∞–π—Ç.—Ä—Ñ")

@dp.message_handler(lambda msg: '.' in msg.text and len(msg.text) in (10, 21))
async def process_date_input(message: types.Message):
    try:
        dates = [d.strip() for d in message.text.split(',')]
        if len(dates) == 1:
            birth_date = datetime.strptime(dates[0], "%d.%m.%Y")
            day, month, year = birth_date.day, birth_date.month, birth_date.year
            c = sum(int(ch) for ch in str(year))
            d1 = day + month + c
            e = reduce_to_arcana(d1)
            gpt_text = get_gpt_interpretation(e)
            await message.answer(f"üé¥ –ê—Ä–∫–∞–Ω —Å—É–¥—å–±—ã: {e}\n\n{gpt_text}")
        elif len(dates) == 2:
            await message.answer("üîó –ë–∞–∑–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
        else:
            await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: 06.10.1985 –∏–ª–∏ 06.10.1985, 15.08.1990")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì")

def reduce_to_arcana(num):
    while num > 22:
        num = sum(int(d) for d in str(num))
    return num if num != 0 else 22

def get_gpt_interpretation(arkana_number):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∑–æ—Ç–µ—Ä–∏–∫ –∏ —Ç–∞—Ä–æ–ª–æ–≥. –î–∞–π –ø–æ–Ω—è—Ç–Ω—É—é, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –ê—Ä–∫–∞–Ω–∞ –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã. –û–±—ä—è—Å–Ω–∏ –∫—Ä–∞—Ç–∫–æ —Å—É—Ç—å, –º–∏—Å—Å–∏—é, –≤–æ–∑–º–æ–∂–Ω—ã–µ —É—Ä–æ–∫–∏."},
                {"role": "user", "content": f"–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ê—Ä–∫–∞–Ω –Ω–æ–º–µ—Ä {arkana_number} –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã."}
            ],
            temperature=0.7,
            max_tokens=300
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}"

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

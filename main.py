from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging
import os
import requests
import openai
from flatlib.chart import Chart
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib import const
from flatlib.aspects import getAspects
from fpdf import FPDF

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENCAGE_API_KEY = os.getenv("OPENCAGE_API_KEY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)

start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç"))

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É"),
    KeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å PDF —Ä–∞–∑–±–æ—Ä"),
    KeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä")
)

user_cache = {}

def get_coordinates(city):
    try:
        url = f"https://api.opencagedata.com/geocode/v1/json?q={city}&key={OPENCAGE_API_KEY}&language=ru"
        res = requests.get(url)
        data = res.json()
        lat = data['results'][0]['geometry']['lat']
        lng = data['results'][0]['geometry']['lng']
        return GeoPos(str(lat), str(lng))
    except:
        return None

def gpt_interpretation(planet, sign, house):
    prompt = f"–û–ø–∏—à–∏ –≤–ª–∏—è–Ω–∏–µ {planet} –≤ –∑–Ω–∞–∫–µ {sign} –∏ {house} –¥–æ–º–µ –≤ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ. –°—Ç–∏–ª—å: –∞—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, –≥–ª—É–±–æ–∫–æ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ."
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –î–∞–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–∫—Ç–æ–≤–∫—É."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=300
    )
    return response.choices[0].message.content.strip()

def gpt_aspect_interpretation(aspect):
    prompt = f"–î–∞–π –∞—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∞—Å–ø–µ–∫—Ç–∞ {aspect}. –ü–∏—à–∏ –∫—Ä–∞—Å–∏–≤–æ, –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥."
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –∞—Å—Ç—Ä–æ–ª–æ–≥, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—à—å –∞—Å–ø–µ–∫—Ç—ã –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=300
    )
    return response.choices[0].message.content.strip()

def generate_pdf(user_id, interpretations):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞", ln=True, align='C')
    pdf.ln(10)
    for interp in interpretations:
        pdf.multi_cell(0, 10, interp)
        pdf.ln(2)
    file_path = f"/mnt/data/chart_{user_id}.pdf"
    pdf.output(file_path)
    return file_path

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ó–µ—Ä–∫–∞–ª–æ –°—É–¥—å–±—ã* ‚Äî –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–∫—Ä–æ–µ—Ç —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É —Å –ø–æ–º–æ—â—å—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ GPT.

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç ‚ú®",
        reply_markup=start_kb,
        parse_mode="Markdown"
    )

@dp.message_handler(lambda msg: msg.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def show_main_menu(message: types.Message):
    await message.answer("–ì–æ—Ç–æ–≤–æ! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å üëá", reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä")
async def handle_payment(message: types.Message):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 199‚ÇΩ", url="https://your-site.com/pay"))
    await message.answer(
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å *—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π PDF-–∞–Ω–∞–ª–∏–∑* –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Å —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞–º–∏ –ø–ª–∞–Ω–µ—Ç –∏ –∞—Å–ø–µ–∫—Ç–æ–≤, –ø–µ—Ä–µ–π–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üëá",
        reply_markup=kb,
        parse_mode="Markdown"
    )

@dp.message_handler(lambda msg: msg.text == "üîÆ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É")
async def request_data(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è:
–î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥")

@dp.message_handler(lambda msg: msg.text == "üìÑ –°–∫–∞—á–∞—Ç—å PDF —Ä–∞–∑–±–æ—Ä")
async def send_pdf(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_cache and 'pdf_path' in user_cache[user_id]:
        with open(user_cache[user_id]['pdf_path'], 'rb') as doc:
            await message.answer_document(doc)
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.")

@dp.message_handler()
async def natal_analysis(message: types.Message):
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        date_str, time_str, city = [x.strip() for x in text.split(',')]
        pos = get_coordinates(city)

        if not pos:
            await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞.")
            return

        date_parts = date_str.split('.')
        dt = Datetime(f"{date_parts[2]}/{date_parts[1]}/{date_parts[0]}", time_str, '+03:00')
        chart = Chart(dt, pos)

        planets = ['SUN', 'MOON', 'ASC', 'MERCURY', 'VENUS', 'MARS']
        interpretations = []
        short_summary = []

        for obj in planets:
            item = chart.get(obj)
            line = f"{item} ‚Äî {item.sign} –≤ {item.house} –¥–æ–º–µ"
            short_summary.append(line)
            interp = gpt_interpretation(item, item.sign, item.house)
            interpretations.append(f"{line}\n{interp}\n")

        aspects = getAspects(chart.objects, orb=6)
        interpretations.append("üåå –ê—Å–ø–µ–∫—Ç—ã:")
        for asp in aspects:
            description = f"{asp.obj1} {asp.type} {asp.obj2}"
            interpretation = gpt_aspect_interpretation(description)
            interpretations.append(f"{description}\n{interpretation}\n")

        summary = "\n".join(short_summary)
        await message.answer(f"üî≠ –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä:\n\n{summary}\n\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –ø–æ–ª–Ω–æ–π —Ç—Ä–∞–∫—Ç–æ–≤–∫–æ–π...")

        pdf_path = generate_pdf(user_id, interpretations)
        user_cache[user_id] = {"pdf_path": pdf_path}

        with open(pdf_path, 'rb') as doc:
            await message.answer_document(doc)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
